import streamlit as st
import os
import tempfile
from PIL import Image
import numpy as np
from config import INPUT_DIR, DB_PATH, VECTOR_DB_PATH, DOCSTORE_PATH
from data_processing.pdf_handler import handle_pdf
from data_processing.image_handler import analyze_image
from storage.vector_store import build_vectorstore, build_retriever
from retrieval.rag_engine import create_content_summaries, multi_modal_rag
from langchain.storage import LocalFileStore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'initialized' not in st.session_state:
    st.session_state.initialized = False
    st.session_state.content_storage = []
    st.session_state.retriever = None
    st.session_state.processed_files = set()

def initialize_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    if not st.session_state.initialized:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs(INPUT_DIR, exist_ok=True)
        os.makedirs(DB_PATH, exist_ok=True)
        os.makedirs(VECTOR_DB_PATH, exist_ok=True)
        os.makedirs(DOCSTORE_PATH, exist_ok=True)
        st.session_state.initialized = True

def process_pdf_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
    if uploaded_file.name not in st.session_state.processed_files:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_file_path = tmp_file.name
        
        try:
            table_elements, text_chunks = handle_pdf(tmp_file_path)
            text_overviews, table_overviews = create_content_summaries(
                text_chunks, table_elements, summarize_texts=True
            )
            
            for item, summary in zip(text_chunks, text_overviews):
                st.session_state.content_storage.append({
                    'type': 'pdf',
                    'elem': item,
                    'sum': summary,
                    'path': uploaded_file.name,
                    'metadata': {'start': 0, 'end': 0},
                })
                
            for item, summary in zip(table_elements, table_overviews):
                st.session_state.content_storage.append({
                    'type': 'pdf',
                    'elem': item,
                    'sum': summary,
                    'path': uploaded_file.name,
                    'metadata': {'start': 0, 'end': 0},
                })
                
            st.session_state.processed_files.add(uploaded_file.name)
            os.unlink(tmp_file_path)
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞ {uploaded_file.name}: {str(e)}")
            os.unlink(tmp_file_path)
            return False
    return True

def process_image_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if uploaded_file.name not in st.session_state.processed_files:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_file_path = tmp_file.name
        
        try:
            image_data, image_caption = analyze_image(tmp_file_path)
            st.session_state.content_storage.append({
                'type': 'image',
                'elem': image_data,
                'sum': image_caption,
                'path': uploaded_file.name,
                'metadata': {'start': 0, 'end': 0},
            })
            
            st.session_state.processed_files.add(uploaded_file.name)
            os.unlink(tmp_file_path)
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {uploaded_file.name}: {str(e)}")
            os.unlink(tmp_file_path)
            return False
    return True

def build_retriever_system():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    if st.session_state.content_storage and st.session_state.retriever is None:
        try:
            vectorstore = build_vectorstore(VECTOR_DB_PATH)
            docstore = LocalFileStore(DOCSTORE_PATH)
            st.session_state.retriever = build_retriever(
                vectorstore, docstore, st.session_state.content_storage
            )
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞: {str(e)}")
            return False
    return st.session_state.retriever is not None

def main():
    st.set_page_config(page_title="Multimodal RAG System", page_icon="üìö", layout="wide")
    st.title("üìö Multimodal RAG System")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    initialize_system()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    with st.sidebar:
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
        pdf_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF —Ñ–∞–π–ª—ã", 
            type=['pdf'], 
            accept_multiple_files=True,
            key="pdf_uploader"
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
            type=['jpg', 'jpeg', 'png'], 
            accept_multiple_files=True,
            key="image_uploader"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã", type="primary"):
            if pdf_files or image_files:
                progress_bar = st.progress(0)
                total_files = len(pdf_files) + len(image_files)
                processed_count = 0
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
                for pdf_file in pdf_files:
                    if process_pdf_file(pdf_file):
                        processed_count += 1
                        progress_bar.progress(processed_count / total_files)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for image_file in image_files:
                    if process_image_file(image_file):
                        processed_count += 1
                        progress_bar.progress(processed_count / total_files)
                
                progress_bar.empty()
                st.success(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
                if build_retriever_system():
                    st.success("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        if st.session_state.processed_files:
            st.divider()
            st.subheader("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            for file_name in st.session_state.processed_files:
                st.markdown(f"- {file_name}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if st.session_state.retriever:
        st.header("üîç –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑")
        
        # –¢–∏–ø –ø–æ–∏—Å–∫–∞
        search_type = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            ["–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", "–ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"]
        )
        
        if search_type == "–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å":
            query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ?")
            
            if st.button("üîé –ù–∞–π—Ç–∏", type="primary") and query:
                with st.spinner("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..."):
                    try:
                        result = multi_modal_rag(query, st.session_state.retriever, is_image=False)
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                        st.markdown(result)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
                        
        else:  # –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            image_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞", type=['jpg', 'jpeg', 'png'])
            
            if image_file and st.button("üîé –ù–∞–π—Ç–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫..."):
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                            tmp_file.write(image_file.getvalue())
                            tmp_file_path = tmp_file.name
                        
                        result = multi_modal_rag(tmp_file_path, st.session_state.retriever, is_image=True)
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                        st.markdown(result)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        st.divider()
                        st.subheader("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
                        st.image(image_file, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                        
                        os.unlink(tmp_file_path)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {str(e)}")
    else:
        st.info("üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.divider()
        st.subheader("‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:")
        st.markdown("""
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:
           - PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü
           - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π
        2. **–ù–∞–∂–º–∏—Ç–µ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã'** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        3. **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞**:
           - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
           - –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        4. **–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        """)

if __name__ == "__main__":
    main()